#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.20
#  in conjunction with Tcl version 8.6
#    Jan 24, 2019 08:06:02 PM IST  platform: Windows NT

import sys
import pafy
import requests
import os
import threading



try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import unknown_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    unknown_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    unknown_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None


class Toplevel1:

    #My functions and variables

    c = 1
    temp = []
    arr = []
    err = []
    threads = []
    
    def playlist_download(url):
        from bs4 import BeautifulSoup as bs
        try:
            r = requests.get(url)
            page = r.text
            soup = bs(page, 'html.parser')
            res = soup.find_all('a', {'class': 'pl-video-title-link'})
            res = ['https://www.youtube.com' + l.get("href") for l in res]
            return res
        except Exception as e:
            print(e)

    def download_err(i):
        global path
        try:
            fh1 = open(path + "done.txt","a") 
            fh = open(path +"err.txt", "a")
            video = pafy.new(i[0])
            name = str(i[1]) + '. ' + video.title
            try:
                for p in ('|', '?', '\\', '/', ':', '*', '<', '>', '\"'):
                     name = name.replace(p, '_')

                best = video.getbest(preftype="mp4")
                print("Downloading "+name+"...")
                best.download(quiet=True, filepath= path + name + '.' + best.extension)
                print("Done Downloading "+name)
                fh1.write("Done : " +name+ '\n')
                fh1.close()
                

            except Exception as e:
                print(e +"\\"+ str(i[0])+"\\"+str(i[1])+"\\"+name)
                fh.write('Failed : '+ name +'\n')
                print("Error Downloading "+name)
                fh.close()    
                
        except Exception as f:
            print(f)

    

    def startDownload():
        
        ## Variables and others
        
        uri = self.url.get()
        path = self.path.get()

        path =  path + '\\'
        
        try:
            os.makedirs(path)    
            print("Directory " , path ,  " Created ")
        except FileExistsError:
            print("Directory " , path ,  " already exists")

        if ',' in uri:
            temp = uri.split(',')
        else:
            temp.append(uri)

        
        for url in temp:
            if 'playlist' in url:
                arr = playlist_download(url)
            else:
                arr.append(url)

        for i in arr:
            download(i)
            

        while len(threads)>0 :
            for i in threads:
                if not i.isAlive():
                    threads.remove(i)
        else:
            import sort_txt_file as stf
            stf.correct_txt(path)
            sys.exit()



        def cancelButton():
            while len(threads)>0 :
                for i in threads:
                    if not i.isAlive():
                        threads.remove(i)

            sys.exit()            

       

    def download(i):
        global path
        global c
        global threads
        try:
            fh1 = open(path + "done.txt","a") 
            fh = open(path +"err.txt", "a")
            video = pafy.new(i)
            name = str(c) + '. ' + video.title
            c += 1
            try:
                for p in ('|', '?', '\\', '/', ':', '*', '<', '>', '\"'):
                     name = name.replace(p, '_')

                best = video.getbest(preftype="mp4")
                print("Downloading "+name+"...")
                best.download(quiet=True, filepath= path + name + '.' + best.extension)
                print("Done Downloading "+name)
                fh1.write("Done : " +name+ '\n')
                fh1.close()
                

            except Exception as e:
                print(e +"\\"+ str(i[0])+"\\"+str(i[1])+"\\"+name)
                c += 1
                fh.write('Failed : '+ name +'\n')
                print("Error Downloading "+name)
                for _ in range(0,3):
                    t=threading.Thread(target=download_err, args=((i,c),))
                    threads.append(t)
                    t.start()
                #err.append((i,c))
                fh.close()    
                
        except Exception as f:
            print(f)
            c += 1

    c = 1

    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 

        top.geometry("600x207+650+150")
        top.title("New Toplevel")
        top.configure(background="#d9d9d9")

        self.url = tk.Text(top)
        self.url.place(relx=0.133, rely=0.145, relheight=0.164, relwidth=0.84)
        self.url.configure(background="white")
        self.url.configure(font="TkTextFont")
        self.url.configure(foreground="black")
        self.url.configure(highlightbackground="#d9d9d9")
        self.url.configure(highlightcolor="black")
        self.url.configure(insertbackground="black")
        self.url.configure(selectbackground="#c4c4c4")
        self.url.configure(selectforeground="black")
        self.url.configure(width=504)
        self.url.configure(wrap='word')

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.033, rely=0.145, height=26, width=32)
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(text='''URL''')

        self.Label2 = tk.Label(top)
        self.Label2.place(relx=0.033, rely=0.483, height=26, width=35)
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(text='''Path''')

        self.path = tk.Text(top)
        self.path.place(relx=0.133, rely=0.435, relheight=0.164, relwidth=0.84)
        self.path.configure(background="white")
        self.path.configure(font="TkTextFont")
        self.path.configure(foreground="black")
        self.path.configure(highlightbackground="#d9d9d9")
        self.path.configure(highlightcolor="black")
        self.path.configure(insertbackground="black")
        self.path.configure(selectbackground="#c4c4c4")
        self.path.configure(selectforeground="black")
        self.path.configure(width=504)
        self.path.configure(wrap='word')

        self.cancel = tk.Button(top)
        self.cancel.place(relx=0.633, rely=0.725, height=33, width=96)
        self.cancel.configure(activebackground="#d9d9d9")
        self.cancel.configure(activeforeground="#000000")
        self.cancel.configure(background="#d9d9d9")
        self.cancel.configure(disabledforeground="#a3a3a3")
        self.cancel.configure(foreground="#000000")
        self.cancel.configure(highlightbackground="#d9d9d9")
        self.cancel.configure(highlightcolor="black")
        self.cancel.configure(pady="0")
        self.cancel.configure(text='''Cancel''')
        self.cancel.configure(width=96)
        self.cancel.configure(command=self.cancelButton)

        self.Start = tk.Button(top)
        self.Start.place(relx=0.817, rely=0.725, height=33, width=93)
        self.Start.configure(activebackground="#d9d9d9")
        self.Start.configure(activeforeground="#000000")
        self.Start.configure(background="#d9d9d9")
        self.Start.configure(disabledforeground="#a3a3a3")
        self.Start.configure(foreground="#000000")
        self.Start.configure(highlightbackground="#d9d9d9")
        self.Start.configure(highlightcolor="black")
        self.Start.configure(pady="0")
        self.Start.configure(text='''Start''')
        self.Start.configure(width=93)
        self.Start.configure(command=self.startDownload)

if __name__ == '__main__':
    vp_start_gui()





